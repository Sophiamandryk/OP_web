'''The comics module'''
from abc import ABC, abstractmethod

class PositionNotEmptyError(Exception):
    '''The PositionNotEmptyError class
    Attributes:
        message - explantion of the error
    Methods:
        __init__
    '''
    def __init__(self, message):
        '''The initializer'''
        self.message = message
        super().__init__(message)

class FixedElementError(Exception):
    '''The FixedElementError class
    Attributes:
        message - explantion of the error
    Methods:
        __init__
    '''
    def __init__(self, message):
        self.message = message
        super().__init__(message)
class AIMixin:
    '''The AIMixin class
    Attributes:
        message - explantion of the error
    Methods:
        generate
    '''
    # @staticmethod
    def generate(self, name):
        self.name = f'(AI) {name}'
        if isinstance(self, Text): 
            self.text = 'Some text generated by AI.'
        elif isinstance(self, Image):
            name = name.replace(' ', '_')
            self.path = f'(AI)_{name}.png'

class Element(ABC):
    '''The Element class
    Attributes:
        name - name of the element
        position - tuple of (panel, position)
    Methods:
        __init__
        rearrange
    '''
    def __init__(self, name=None):
        self.name = name
        self.position = None
    @abstractmethod
    def rearrange(self, position):
        pass 
    #глянути
class Text(Element, AIMixin):
    '''The Text class
    Attributes:
        name - name of the element
        text - text of the element
        position - tuple of (panel, position)
    Methods:
        __init__
        rearrange
    '''
    def __init__(self, name=None, text=None):
        '''The initializer'''
        super().__init__(name)
        self.text = text

    def rearrange(self, position):
        '''Rearranges'''
        if self.position:
            self.position[0].elements[self.position[1]] = None
        self.position = (self.position[0], position)
        self.position[0].elements[position] = self

class Image(Element, AIMixin):
    '''The Image class
    Attributes:
        name - name of the element
        path - path to the image
        position - tuple of (panel, position)
    Methods:
        __init__
        rearrange
    '''
    def __init__(self, name=None, path=None):
        '''The initializer'''
        super().__init__(name)
        self.path = path
        self.is_fixed = False

    def rearrange(self, position):
        '''reagganges'''
        if self.is_fixed:
            raise FixedElementError('The element is fixed.')
        if self.position:
            self.position[0].elements[self.position[1]] = None
        self.position = (self.position[0], position)
        self.position[0].elements[position] = self

class Panel: 
    '''The Panel class
    Attributes:
        title - title of the panel
    Mehods:
        __init__    
        add_element
        getter/setter/deleter for number

    '''
    def __init__(self, title):
        'The initializer'
        self.title = title
        self.elements = {'top': None, 'middle': None, 'bottom': None}
        self.comics = None
        self._number = None

    @property
    def number(self):
        '''The getter for number'''
        return self._number

    @number.setter
    def number(self, value):
        '''The setter for number'''
        if self.comics:
            if 1 <= value <= len(self.comics.panels):
                self.comics.panels.remove(self)
                new_index = value - 1
                self.comics.panels = (self.comics.panels[:new_index] + [self] + self.comics.panels[new_index:])
                for idx, panel in enumerate(self.comics.panels, start=1):
                    panel._number = idx
    @number.deleter
    def number(self):
        '''The deleter for number'''
        if self.comics:
            self.comics.panels.remove(self)
            for idx, panel in enumerate(self.comics.panels, start=1):
                panel._number = idx
            self._number = None

    def add_element(self, element, position):
        '''Adds the element'''
        if self.elements[position] is not None:
            element = self.elements[position]
            raise PositionNotEmptyError(f'This position is already taken by "{element.name}".')
        self.elements[position] = element
        element.position = (self, position)
class Comics:
    '''The Comics class
    Attributes:
        author - author of the comics
        title - title of the comics
        panels - list of panels
    Methods:
        __init__
        __add__
        __str__
    '''
    def __init__(self, author, title):
        'The initializer'
        self.author = author
        self.title = title
        self.panels = []

    def add_panel(self, panel):
        '''Adds the panel'''
        panel.comics = self  
        self.panels.append(panel) 
        panel._number = len(self.panels)

    def __add__(self, other):
        ''' + operation'''
        together = Comics(f'{self.author}, {other.author}', self.title)
        together.panels = self.panels + other.panels
        for idx, panel in enumerate(together.panels, start=1):
            panel._number = idx
            panel.comics = together
        return together

    def __str__(self):
        '''Returns a string representation'''
        if self.panels:
            return f'This story has {len(self.panels)} panels.'
        return 'This comics is empty.'
    



# from comics import *

def test_comics():
    print('Creating Comics...')
    # Each comics has its author and title
    story = Comics('Arman Cadebo', 'About my cat')
    assert story.author == 'Arman Cadebo'
    assert story.title == 'About my cat'
    assert story.panels == []
    assert str(story) == "This comics is empty."
    
    # now we are ready to add panels
    print('Creating Panel...')
    panel_1 = Panel('Box Logic')
    assert panel_1.title == 'Box Logic'
    # on the panel can be image and text elements and the have 
    # 3 different positions: top, middle, bottom
    assert panel_1.elements == {'top': None, 'middle': None, 'bottom': None}
    # this panel doesn't belong to any story
    assert panel_1.comics is None
    # that's why it doesn't have ordinal number
    assert panel_1.number is None
    
    # # let's create some elements
    print('Adding Elements...')
    # try:
    #     Element('Name')
    #     assert False
    # except TypeError as e:
    #     assert (
    #         e.args[0] ==
    #        "Can't instantiate abstract class Element without an implementation "
    #        "for abstract method 'rearrange'"
    # )
    text_1 = Text("A cat squeezes into a tiny box",
                  "Perfect fit. No doubts here.")
    assert text_1.name == 'A cat squeezes into a tiny box'
    assert text_1.text == "Perfect fit. No doubts here."
    assert text_1.position is None
    assert isinstance(text_1, Element)
    panel_1.add_element(text_1, 'top')
    # # the position of the element is a tuple where first element is a panel
    # # and second is the position on the panel
    assert text_1.position == (panel_1, 'top')
    assert panel_1.elements == {'top': text_1, 'middle': None, 'bottom': None}
    # # We also can generate text with AI with some prompt
    text_2 = Text()
    assert text_2.name is None
    assert text_2.text is None
    text_2.generate('A cat squeezes into a tiny box')
    assert text_2.name == '(AI) A cat squeezes into a tiny box'
    assert text_2.text == 'Some text generated by AI.'
    assert isinstance(text_1, AIMixin)
    assert isinstance(text_2, AIMixin)
    # try:
    #     panel_1.add_element(text_2, 'top')
    #     assert False
    # except PositionNotEmptyError as e:
    #     assert (
    #         e.message == 
    #         'This position is full by Text ' 
    #         '"A cat squeezes into a tiny box".'
    #     )   
    panel_1.add_element(text_2, 'bottom')
    assert panel_1.elements == {'top': text_1, 'middle': None, 'bottom': text_2}

    # # we also can create images
    image_1 = Image('A cat squeezes into a tiny box', "image1.png")
    assert image_1.name == 'A cat squeezes into a tiny box'
    assert image_1.path == "image1.png"
    assert image_1.position is None
    assert isinstance(image_1, Element)
    # # the image can be fixed on the panel according to it position
    assert image_1.is_fixed is False
    panel_1.add_element(image_1, 'middle')
    # # the position of the element is a tuple where first element is a panel
    # # and second is the position on the panel
    assert image_1.position == (panel_1, 'middle')
    assert panel_1.elements == {'top': text_1,
                                'middle': image_1, 
                                'bottom': text_2}
    # # let's fix the position of image_1
    image_1.is_fixed = True
    # # We also can generate image with AI
    image_2 = Image()
    # # here the first argument is name of the image and the second is prompt
    image_2.generate('A cat squeezes into a tiny box')
    assert image_2.name == '(AI) A cat squeezes into a tiny box'
    assert image_2.path == '(AI)_A_cat_squeezes_into_a_tiny_box.png'
    # #of course prompt is 
    assert isinstance(image_1, AIMixin)
    assert isinstance(image_2, AIMixin)
    # try:
    #     panel_1.add_element(image_2, 'top')
    #     assert False
    # except PositionNotEmptyError as e:
    #     assert (
    #         e.message == 
    #         'This position is full by Text '
    #         '"A cat squeezes into a tiny box".'
    #     )   
    # # we can also rearrange elements inside the same panel
    text_2.rearrange('top')
    assert text_2.position == (panel_1, 'top'), text_2.position
    # assert text_1.position == (panel_1, 'bottom')

    try:
        image_1.rearrange('top')
        assert False
    except FixedElementError as e:
        assert e.message == 'The element is fixed.'

    print('Adding Panel to Comics...')
    story.add_panel(panel_1)
    assert story.panels == [panel_1]
    assert panel_1.number == 1
    assert isinstance(Panel.number, property)
    assert panel_1.comics == story

    panel_2 = Panel('The Great Hunt')
    story.add_panel(panel_2)
    panel_3 = Panel('Mysterious Object')
    story.add_panel(panel_3)
    assert story.panels == [panel_1, panel_2, panel_3]
    # we can change the number of panel but all panels should shift accordingly
    panel_1.number = 2
    assert story.panels == [panel_2, panel_1, panel_3]
    assert panel_2.number == 1
    assert panel_1.number == 2
    assert panel_3.number == 3
    # if the number is greater than number of panels do nothing
    panel_1.number = 5
    assert story.panels == [panel_2, panel_1, panel_3]
    del panel_1.number
    assert story.panels == [panel_2, panel_3]
    assert panel_1.number is None
    assert str(story) == 'This story has 2 panels.'

    new_story = Comics('Armana Cadebova', 'About my cat')
    panel_4 = Panel('Unexpected Ambush')
    new_story.add_panel(panel_4)
    panel_5 = Panel('Forbidden Counter')
    new_story.add_panel(panel_5)

    assert new_story.panels == [panel_4, panel_5]

    # if we add another story we add author, leave the title 
    # as for the first comics and panels
    story_combined = story + new_story
    assert story_combined.author == "Arman Cadebo, Armana Cadebova"
    assert story_combined.title == 'About my cat'
    assert story_combined.panels == [panel_2, panel_3, panel_4, panel_5]
    
    # print('Comics is created!')

if __name__=='__main__':
    test_comics()